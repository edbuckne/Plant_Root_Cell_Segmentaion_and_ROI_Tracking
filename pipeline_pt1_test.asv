%% Data configuration data (config file)
clear all
spm = input('What is the specimen number? ');
tmStart = input('Which time stamp do you want to be evaluated first? ');
tmEnd = input('Which time stamp do you want to be evaluated last? ');
sprd = input('Is the GFP data at low contrast? (1 - yes, 0 - no) ');
if(sprd==1)
    [I,zTest] = microImInputRaw(spm,1,1,1);
    [I,minp,maxp] = spreadPixelRange(I);
    for z=1:zTest
        imwrite(I(:,:,z),'spread_test.tif','writemode','append');
    end
end
TH = zeros(tmEnd-tmStart+1,1);
for t=tmStart:tmEnd
    TH(t) = input(['What is the double threshold of the GFP activity for time ' num2str(t) '? ']);
end
xPix = input('What is the pixel distance in microns for the x and y directions? ');
yPix = xPix;
zPix = input('What is the pixel distance in microns for the z direction? ');
xyratz = zPix/xPix;
clear I;
clear zTest;
clear z;
clear t;
save('data_config');

%% GFP indication
clear all

load('data_config')

sigma = 2;
zRange = [];
GVtmp = [0 0];
zAvg = [];
minp = 0;
maxp = 1;

I0 = microImInputRaw(1,1,1,1);

if(sprd==1)
    [I0,minp,maxp] = spreadPixelRange(I0);
end
zRange = [zRange; calcZShift(I0,TH(1),sigma)];
zAvg = [zAvg; round((zRange(1,1)+zRange(1,2))/2)];
s1 = size(I0);

for z=zRange(1,1):zRange(1,2)
    imwrite(I0(:,:,z),'01.tif', 'writemode','append');
end
    
for t=tmStart+1:tmEnd
    tic

    disp(['Calculating shift vector for time ' num2str(t)])
    
    I1 = microImInputRaw(1,t,1,1);
    I1 = I1-minp;
    I1 = I1./maxp;
    
    zRange = [zRange; calcZShift(I1,TH(t),sigma)];
    zAvg = [zAvg; round((zRange(t,1)+zRange(t,2))/2)];

    s1 = size(I1);
    for z=zRange(t,1):zRange(t,2)
        imwrite(I1(:,:,z),[ num2str(t,'%.2u') '.tif'], 'writemode','append');
    end

    I0=I1;

    toc
end
save('zRange','zRange')

%% Brightfield growth vector detection
clear all

load('data_config')

sigma = 2; %Sigma is the variable used to filter with the gaussian
GVtmp = [0 0]; %Holds the cummalative growth vector from t1
GV = []; %Holds all growth vectors over time

I00 = im2uint16(microImInputRaw(1,1,2,1));
    
for t=tmStart:tmEnd
    tic

    disp(['Calculating shift vector for time ' num2str(t)])
    I1 = microImInputRaw(1,t,1,1);
    I11 = im2uint16(microImInputRaw(1,t,2,1));
    I1 = I1-minp;
    I1 = I1./maxp;
    zRange = [zRange; calcZShift(I1,TH,sigma)];
    zAvg = [zAvg; round((zRange(t,1)+zRange(t,2))/2)];
    zFocus = zFocus+(zAvg(t)-zAvg(t-1));


    s1 = size(I1);
    for z=zRange(t,1):zRange(t,2)
        imwrite(I1(:,:,z),['zStackTrack1/' num2str(t) '.tif'], 'writemode','append');
    end
    
    GVtmp = GVtmp-calcGrowthVec(I00,I11);
    
    Ifocus = imtranslate(I11(:,:,zFocus),GVtmp);
    imwrite(Ifocus,['track1/' num2str(t) '.tif']);
    I0=I1;
    I00=I11;

    toc
end
%% 3D segmentation
%This section looks at each set of GFP images and segments the regions
clear all

mkdir 3D_SEG
load('data_config');
disp('Segmenting GFP cluster information');
clInfo = []; %Holds the information concerning the activity location 
zStacks = zeros(tmEnd-tmStart+1,3);
timeArray = zeros(tmEnd-tmStart+1,2);

sigma = 2; %Variance used to filter the images

for t=tmStart:tmEnd
    disp(['Time Stamp: ' num2str(t)]);
    tmStr = num2str(t,'%.4u'); %Create a new directory to put the segmented images in
    mkdir([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/TM' tmStr]);
    
    [I,zNum] = microImInputRaw(spm,t,1,1); %Get the images
    zStacks(t,:) = [size(I,1) size(I,2) zNum];
    
    %Spread pixel values if the image is low contrast
    if(sprd==1)
        I = I-minp;
        I = I./maxp;
    end
    
    [Ireg,CL] = gseg3(I,TH(t),sigma,xyratz); %Segment the regions
    CLnum = size(CL);
    clInfo = [clInfo; CL zeros(CLnum(1),1)+t];
    timeArray(t,:) = [size(clInfo,1)-size(CL,1)+1 size(clInfo,1)];
    for z=1:zStacks(t,3)
        imwrite(Ireg(:,:,z),[pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/TM' tmStr '/SEG_IM.tif'],'writemode','append');
    end
end
save([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information'],'clInfo','timeArray');
save('zStacks','zStacks');
%%
%This section obtains the shape information from the image regions
clear all

load('data_config');
load('zStacks');

load([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information']);
sCL = size(clInfo);
shapeInfo = zeros(sCL(1),9);
statsTot = zeros(tmEnd-tmStart-1,4);

disp('Doing mathematical shape representation of each cluster');
for t=tmStart:tmEnd
    t
    timeTot = 0;
    timeTotCount = 0;
    tmStr = num2str(t,'%.4u');
    
    [I,~] = microImInputRaw(spm,t,1,1); %Get the original image
    sI = size(I);
    Ireg = zeros(sI);
    for z=1:sI(3)
        Ireg(:,:,z) = im2double(imread([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/TM' tmStr '/SEG_IM.tif'],z));
    end
    
    for i=1:sCL(1) %Look at each element
        if~(clInfo(i,10)==t) %Don't consider an element when it's not in the current time stamp
            continue;
        end
        secVal = Ireg(clInfo(i,2),clInfo(i,1),clInfo(i,3)); %Get the value of the section from the COM
        tot = 0; %Used to sum up all pixle values in the region to normalize the curve
        totCount = 0;
        for x=clInfo(i,4):clInfo(i,5)
            for y=clInfo(i,6):clInfo(i,7)
                for z=clInfo(i,8):clInfo(i,9)
                    if(Ireg(y,x,z)==secVal)
                        timeTot = timeTot+I(y,x,z);
                        tot = tot+I(y,x,z);
                        timeTotCount = timeTotCount+1;
                        totCount = totCount+1;
                    end
                end
            end
        end
        
        Ex = clInfo(i,1); %All of the expected values
        Ey = clInfo(i,2); 
        Ez = clInfo(i,3);
        Vx = 0; %Variences
        Vy = 0;
        Vz = 0;
        Cxy = 0; %Covariences
        Cxz = 0;
        Cyz = 0;
        
        Ilog = Ireg==secVal; %Used as a mask for the regions
        Ishape = Ilog.*I; 
        y=clInfo(i,6);
        z=clInfo(i,8);
        for x=clInfo(i,4):clInfo(i,5) %Go through them again getting the covarience information            
            for y=clInfo(i,6):clInfo(i,7)                                
                for z=clInfo(i,8):clInfo(i,9)
                    Vx = Vx+((x-Ex)^2)*Ilog(y,x,z); %V(X)
                    Vy = Vy+((y-Ey)^2)*Ilog(y,x,z); %V(Y)
                    Vz = Vz+((z-Ez)^2)*Ilog(y,x,z); %V(Z)
                    Cxy = Cxy+(x-Ex)*(y-Ey)*Ilog(y,x,z); %C(XY)
                    Cxz = Cxz+(x-Ex)*(z-Ez)*Ilog(y,x,z); %C(XZ)
                    Cyz = Cyz+(y-Ey)*(z-Ez)*Ilog(y,x,z); %C(YZ)
                end
            end
        end
        shapeInfo(i,1) = Vx/totCount; %Vx,Vy,Vz,Cxy,Cxz,Cyz
        shapeInfo(i,2) = Vy/totCount;
        shapeInfo(i,3) = Vz/totCount;
        shapeInfo(i,4) = Cxy/totCount;
        shapeInfo(i,5) = Cxz/totCount;
        shapeInfo(i,6) = Cyz/totCount;
        shapeInfo(i,7) = totCount; %Total number of voxels effected
        shapeInfo(i,8) = tot/totCount; %Average voxel intensity
        shapeInfo(i,9) = tot; %Sum of voxel intensities
         
    end
    statsTot(t,:) = [timeTotCount timeTot/timeTotCount timeTot timeTotCount*(2*xPix+zPix)]; %Total voxels effected, total average, total sum
end
mkdir SHAPE_INFO
save([pwd '/SHAPE_INFO/shape_info'],'shapeInfo','statsTot');

%% Obtaining spread scores
clear all

load('data_config');
load(['3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information']);
load('SHAPE_INFO/shape_info');

spreadScore = zeros(size(clInfo,1),1);

for t = tmStart:tmEnd;
[m_xyz,s_xyz] = Gaussian_ML_estimate(clInfo(timeArray(t,1):timeArray(t,2),1:3)'); %Maximum likelihood parameter estimation

for i=timeArray(t,1):timeArray(t,2)
    spreadScore(i) = (1e8)*comp_gauss_dens_val(m_xyz,s_xyz,clInfo(i,1:3)'); %Spreadscore using 3D gaussian
end
end
meanSS = mean(spreadScore);
varSS = var(spreadScore);
spreadScore = (spreadScore-meanSS)./(sqrt(varSS));
save('spreadScore','spreadScore')

%% Machine Learning rejection (Fe-minus) (NOT FINISHED)
clear all

load('data_config');
load('3D_SEG/SPM01/cell_location_information');
save('clOld','clInfo','timeArray');
load('SHAPE_INFO/shape_info');
save('siOld','shapeInfo');
load('spreadScore');

x1 = -2.5; %x1 and x2 are the weights for spread score and variance in z
x2 = -2.5;

clFillZ = zeros(1,10); %This will be used to fill false positive regions
shapeFillZ = zeros(1,9);
meanVARZ = mean(shapeInfo(:,3));
varVARZ = var(shapeInfo(:,3));
zVARZ = (shapeInfo(:,3)-meanVARZ)./sqrt(varVARZ);

for i = 1:size(clInfo,1)
    g = (x2/x1)*spreadScore(i)+zVARZ(i)-x2; %Hyperplane decision boundary
    if(g<0) %The region has been rejected
        disp(['Item ' num2str(i) ' has been rejected'])
        clInfo(i,:) = clFillZ; %Replace that region's info with zeros
        shapeInfo(i,:) = shapeFillZ;
    end
end
clInfo = clInfo(clInfo(:,1)>0,:); %Get rid of all zero elements
shapeInfo = shapeInfo(shapeInfo(:,7)>0,:);

save('SHAPE_INFO/shape_info','shapeInfo');

i=1;
timeArray = zeros(tmEnd-tmStart+1,2);
for t=tmStart:tmEnd
    timeArray(t,1) = i; %The beginning pointer of this time stamp
    while(clInfo(i,10)==t && i<s(1))
        i=i+1; %Increment i to continue looking for the end of this time stamp
    end
    if~(i==s(1))
        timeArray(t,2) = i-1;
    else
        timeArray(t,2) = i;
    end
end


save('3D_SEG/SPM01/cell_location_information','clInfo','timeArray');
%FIX TIMEARRAY HERE!!!%

%%
%This section is used for when there are 90 degree views of the specimen
%defined as view 1 and view 2 in the nomenclature.
mkdir ROOT_BORDER
load('data_config')
viewN = input('Enter the number of orthogonal Brightfield views: ');

for t=tmStart:tmEnd
disp(['Time stamp: ' num2str(t)]);
OutputPath = [pwd '/ROOT_BORDER/AC_Multiview_Info_TM' num2str(t,'%.4u')];

[ACV1,ACV2,ACRAWV1,ACRAWV2] = BorderRec(t,viewN);
save(OutputPath,'ACV1','ACV2','ACRAWV1','ACRAWV2')
end
%% Point matching image registration
maxDis = zeros(1,3);
maxDis(1) = input('What is the max shift distance in the x direction? ');
maxDis(2) = input('What is the max shift distance in the y direction? ');
maxDis(3) = input('What is the max shift distance in the z direction? ');

load data_config
load zStacks
%This section takes the points and executes the point matching image
%registration algorithm
CLt0start = 1; %Indices for cell location and contour points
CLtoend = 0;
CPtostart = 1;
CPtoend = 0;
r = 5;

load([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information.mat']); %load the cell location information
% load([pwd '/ROOT_BORDER/Active_Contour_Points.mat']);

sCL = size(clInfo);
timeDiff = tmEnd-tmStart; %How many time points are we looking at?
delSet = zeros(timeDiff,5); %As of right now only looking at the translation

%Find the starting time stamps points
i=CLt0start;
while(clInfo(i,10)==tmStart)
    i=i+1;
end
CLt0end = i-1;

for t=tmStart+1:tmEnd
    minValxz = 1e9;
    disp(['Registering point matching for time ' num2str(t-1) ' to ' num2str(t)]);
    CLt1start = i; %Algorithm on pg. 69 of personal notebook on finding time stamp points
    while(clInfo(i,10)==t && i<sCL(1))
        i=i+1;
    end
    CLt1end = i-1;
    
    CLt0 = clInfo(CLt0start:CLt0end,1:3)'; %All of the t0 COM points
    CLt1 = clInfo(CLt1start:CLt1end,1:3)'; %All of the t1 COM points
    delSet(t-1,1:3) = regPM3D(CLt0,CLt1,r,maxDis,xyratz); %3D point matching image registration
    
    CLt0start = CLt1start; %Next time stamp
    CLt0end = CLt1end;
    
end

mkdir IMAGE_REGISTRATION
save([pwd '/IMAGE_REGISTRATION/delta_set'],'delSet');

%%
%Tracking information
clear all

load('zStacks');
load('data_config');
load([pwd '/3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information.mat']); %Get the cell information
load([pwd '/IMAGE_REGISTRATION/delta_set']); %Image registration data

mkdir TRACKING

T = eye(4);
THDist = 40;
i = 1;
s = size(clInfo);

timeArray = zeros(tmEnd-tmStart+1,2); %This holds the time separation info of clInfo 
PC = zeros(s(1),2); %holds the parent/child relationships and their distances
PC2 = zeros(s(1),2); %holds the parent/child relationships and their distances

for t=tmStart:tmEnd
    timeArray(t,1) = i; %The beginning pointer of this time stamp
    while(clInfo(i,10)==t && i<s(1))
        i=i+1; %Increment i to continue looking for the end of this time stamp
    end
    if~(i==s(1))
        timeArray(t,2) = i-1;
    else
        timeArray(t,2) = i;
    end
end

i=1;
j=1;
for t=tmStart:tmEnd-1 %Get the points from the clInfo array
    t0Points = clInfo(timeArray(t,1):timeArray(t,2),1:3)'; %COM points first time point
    t1Points = clInfo(timeArray(t+1,1):timeArray(t+1,2),1:3)'; %COM points second time point
    
    T(1:3,4) = delSet(t,1:3)'; %Transformation matrix
    
    dMat = disMat(t0Points,t1Points,T);
    dSize = size(dMat); %Get the size of the distance matrix
    
    for N=1:dSize(1) %Going through all of the distance matrix
        childI = 0; %Child index
        minDist = 100;
        for M=1:dSize(2)
            if(dMat(N,M)<THDist && abs(t0Points(3,N)-t1Points(3,M))<=abs(T(3,4))+5)
                if(dMat(N,M)<minDist)
                    childI=M;
                    minDist = dMat(N,M);
                end
            end
        end
        if~(childI==0)
                childI2 = 0; %Child index
                minDist2 = 100;
            for N2=1:dSize(1) %Check double verification
                if(dMat(N2,childI)<THDist && abs(t0Points(3,N2)-t1Points(3,childI))<=abs(T(3,4))+5)
                    if(dMat(N2,childI)<minDist2)
                        childI2=N2;
                        minDist2 = dMat(N2,childI);
                    end
                end
            end
            if ~(childI2==N)
                i=i+1;
                continue;
            end
        end
        if(childI>0) %We have found a PC relationship
            PC(i,1) = childI+timeArray(t+1,1)-1;
        else
            PC(i,1)=0;
        end
        i=i+1;
    end
   
end
for i=1:s(1) %Now find the parents to each 
    found = 0;
    j = 1;
    while(j<=s(1) && ~(PC(j,1)==i))
        j=j+1;
    end
    if~(j>=s(1))
        PC(i,2) = j;
    end
end
save([pwd '/TRACKING/PC_Relationships'],'PC');

%% Location Assessment of each region
clear all

%load data
mkdir PHY_DIST
load('data_config');
load('zStacks');
load(['3D_SEG/SPM' num2str(spm,'%.2u') '/cell_location_information']);
load('TRACKING/PC_Relationships');

%Find the size of the time array so that we can talk about each individual
%point
s = size(timeArray);
%Create a new variable that holds the physical cylindrical coordinates
scl = size(clInfo);
phDist = zeros(scl(1),3);

for t=1:s(1)
    t
    %Load the contours of the root and find the 3D midline
    load(['ROOT_BORDER/AC_Multiview_Info_TM' num2str(t,'%.4u')]);
    ACV1(1,:) = filtContour(ACV1(1,:),100,50);
    ACV1(3,:) = filtContour(ACV1(3,:),100,50);
    ACV2(1,:) = filtContour(ACV2(1,:),100,50);
    ACV2(3,:) = filtContour(ACV2(3,:),100,50);
    S=surfaceRec3(ACV1,ACV2,50);
    S = squeeze(S);
    [Ymax,Xi] = max(ACRAWV1(2,:));
    Xshift = ACRAWV1(1,Xi);
    S(:,1) = S(:,1)+Xshift;
   
    
    %Find the physical distance of each region
    for cl=timeArray(t,1):timeArray(t,2)
        [phDist(cl,1), phDist(cl,2), phDist(cl,3)]=rootCylCoord(clInfo(cl,1),Ymax-clInfo(cl,2),clInfo(cl,3),xPix,yPix,zPix,S);
    end
end
save('PHY_DIST/phDist','phDist');